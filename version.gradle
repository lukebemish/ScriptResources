version = new Properties().tap {
    load(new FileInputStream(file('version.properties')))
}.get('version')

String lastTaggedVersion = ""
def gitTagProcess = 'git describe --abbrev=0 --tags'.execute()
gitTagProcess.waitFor()
if (gitTagProcess.exitValue() == 0) {
    lastTaggedVersion = gitTagProcess.text.trim()
    def parts = lastTaggedVersion.split("-")
    lastTaggedVersion = parts[0..-2].join("-")
} else {
    logger.warn "Failed to get last tagged version: ERROR(${gitTagProcess.exitValue()})"
}

if (lastTaggedVersion == version) {
    def currentTagProcess = 'git tag --points-at HEAD'.execute()
    currentTagProcess.waitFor()
    if (currentTagProcess.exitValue() != 0 || currentTagProcess.text.trim().empty) {
        def noMetaParts = version.split("-")
        def noBuildParts = noMetaParts[0].split("\\+")
        def mainParts = noBuildParts[0].split("\\.")
        mainParts[-1] = (mainParts[-1] as int + 1) as String
        noBuildParts[0] = mainParts.join(".")
        noMetaParts[0] = noBuildParts.join("+")
        version = noMetaParts.join("-")
    }
}

if (System.getenv('PR_NUMBER')) {
    version += "-pr${System.getenv('PR_NUMBER')}"
} else if (System.getenv('SNAPSHOT_MAVEN_URL')) {
    version += '-SNAPSHOT'
}

subprojects {
    version = rootProject.version
}

class VersioningExtension {
    def getGitCommit() {
        def proc = 'git rev-parse --short HEAD'.execute()
        proc.waitFor()
        if (proc.exitValue()) {
            throw new RuntimeException("Failed to get git commit: ERROR(${proc.exitValue()})")
        }
        return proc.text.trim()
    }

    def getGitCommitDate() {
        def procDate = 'git log -1 --format=%at'.execute()
        procDate.waitFor()
        if (procDate.exitValue()) {
            throw new RuntimeException("Failed to get git commit time: ERROR(${procDate.exitValue()})")
        }
        long timestamp = procDate.text.trim() as long * 1000
        return new Date(timestamp).format(/yyyy-MM-dd HH:mm:ssZ/, TimeZone.getTimeZone("UTC"))
    }
}

allprojects {
    it.extensions.create('versioning', VersioningExtension)
}

println "Version: ${version}"

tasks.register('tagRelease') {
    doLast {
        if (version != lastTaggedVersion) {
            def props = new Properties()
            props.load(new FileInputStream(file('version.properties')))
            props.setProperty('version', version)
            props.store(new FileOutputStream(file('version.properties')), null)

            def gitAddProcess = 'git add version.properties'.execute()
            gitAddProcess.waitFor()
            if (gitAddProcess.exitValue() != 0) {
                throw new GradleException('Failed to add version.properties')
            }

            def gitCommitProcess = ['git','commit','-m',"Bump version to ${version}"].execute()
            def output = new StringBuilder()
            def error = new StringBuilder()
            gitCommitProcess.waitForProcessOutput(output, error)
            if (gitCommitProcess.exitValue() != 0) {
                throw new GradleException("Failed to commit version bump: ${error}")
            }

            def gitTagCreateProcess = "git tag ${version}-${libs.versions.minecraft.get()}".execute()
            gitTagCreateProcess.waitFor()
            if (gitTagCreateProcess.exitValue() != 0) {
                throw new GradleException('Failed to tag release')
            }
        }
    }
}
