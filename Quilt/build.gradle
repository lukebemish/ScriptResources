plugins {
    id 'idea'
}

apply plugin: libs.plugins.quilt.loom.get().pluginId

base {
    archivesName = "${mod_id}-quilt-${libs.versions.minecraft.get()}"
}

loom {
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("run-server")
        }
    }
    runs.each {
        it.vmArgs '-Dnet.fabricmc.tinyremapper.knownindybsm=org/codehaus/groovy/vmplugin/v8/IndyInterface'
    }
}

configurations {
    localImplementation
    runtimeClasspath.extendsFrom localImplementation
    compileOnly.extendsFrom localImplementation
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    }

    modImplementation libs.quilt.loader

    modImplementation libs.qfapi

    modImplementation libs.groovyduvet.all
    localImplementation libs.groovyduvet.core

    compileOnly(project(path: ":Common", configuration: "namedElements")) {
        exclude group: 'org.quiltmc'
    }
}

compileGroovy {
    source project(":Common").sourceSets.main.allGroovy
}

compileJava {
    source project(":Common").sourceSets.main.allJava
}

processResources {
    from project(':Common').sourceSets.main.resources
    exclude 'mods.groovy'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId base.archivesName.get()
        }
    }
}
